{"version":3,"sources":["components/JokeCard.js","components/Scroll.js","components/Player.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["JokeCard","joke","className","alt","src","icon_url","value","Scroll","props","style","overflowY","border","height","children","Player","url","width","light","playing","App","this","robotsIsPendig","onRequestJoke","jokeArr","buttonText","Button","variant","onClick","Component","connect","state","searchField","searchRobots","requestRobots","robotsArr","robotsError","jokeIsPendig","requestJoke","jokeError","dispatch","onSearchChange","event","type","payload","target","onRequestRobots","fetch","then","response","json","data","catch","error","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","initialStateJoke","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"4SAWeA,EATE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,GAAGC,IAAKH,EAAKI,WACtB,4BAAKJ,EAAKK,SCIEC,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,W,yCCYIC,EAdA,SAAC,GAAW,IAAVC,EAAS,EAATA,IAChB,OACC,yBAAKb,UAAU,oCACd,kBAAC,IAAD,CACCc,MAAM,QACNJ,OAAO,QACPG,IAAKA,EACLE,MAAM,wEACNC,SAAU,MCsBRC,E,oNAKK,IAAD,EACwDC,KAAKZ,MAA5Da,EADD,EACCA,eAAgBC,EADjB,EACiBA,cAAeC,EADhC,EACgCA,QAASC,EADzC,EACyCA,WACjD,OAAOH,EACP,wBAAInB,UAAU,MAAd,gBAEC,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,yBACA,kBAACuB,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAASL,GAAgBE,GAAqB,IAC/E,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUvB,KAAMsB,KAEjB,kBAAC,EAAD,CAAQR,IAAK,8E,GAhBCa,aAsBHC,eA3CS,SAAAC,GACvB,MAAO,CACNC,YAAaD,EAAME,aAAaD,YAChCV,eAAgBS,EAAMG,cAAcZ,eACpCa,UAAWJ,EAAMG,cAAcC,UAC/BC,YAAaL,EAAMG,cAAcE,YACjCC,aAAcN,EAAMO,YAAYD,aAChCb,QAASO,EAAMO,YAAYd,QAC3Be,UAAWR,EAAMO,YAAYC,UAC7Bd,WAAYM,EAAMO,YAAYb,eAIL,SAACe,GAC3B,MAAO,CACNC,eAAgB,SAACC,GAAD,OAAWF,ECjBY,CACxCG,KCXkC,sBDYlCC,QDeoDF,EAAMG,OAAOtC,SAChEuC,gBAAiB,kBAAMN,GCbU,SAACA,GACnCA,EAAS,CAAEG,KCb0B,2BDcrCI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIX,EAAS,CAAEG,KCfW,yBDemBC,QAASO,OAC/DC,OAAM,SAAAC,GAAK,OAAIb,EAAS,CAAEG,KCfQ,wBDeqBC,QAASS,WDSjE9B,cAAe,kBAAMiB,GCNU,SAACA,GACjCA,EAAS,CAAEG,KCjBwB,yBDkBnCI,MAAM,2CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIX,EAAS,CAAEG,KCnBS,uBDmBmBC,QAASO,OAC7DC,OAAM,SAAAC,GAAK,OAAIb,EAAS,CAAEG,KCnBM,sBDmBqBC,QAASS,cD2BlDvB,CAA4CV,GG3CvCkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAqB,CAC1B3B,YAAa,IAaR4B,EAAqB,CAC1BtC,gBAAgB,EAChBa,UAAW,GACXC,YAAa,IAiBRyB,EAAmB,CACxBxB,cAAc,EACdb,QAAS,GACTe,UAAW,GACXd,WAAY,uCCpCPqC,G,MAASC,0BAETC,EAAcC,YAAgB,CAAEhC,aDCV,WAA0C,IAAzCF,EAAwC,uDAAlC4B,EAAoBO,EAAc,uDAAP,GAC7D,OAAQA,EAAOvB,MACd,IFjBiC,sBEkBhC,OAAOwB,OAAOC,OAAO,GAAIrC,EAAO,CAACC,YAAYkC,EAAOtB,UACrD,QACC,OAAOb,ICN0CG,cDgBvB,WAA0C,IAAzCH,EAAwC,uDAAlC6B,EAAoBM,EAAc,uDAAP,GAC9D,OAAQA,EAAOvB,MACd,IF7BoC,yBE8BnC,OAAOwB,OAAOC,OAAO,GAAIrC,EAAO,CAAET,gBAAgB,IACnD,IF9BoC,yBE+BnC,OAAO6C,OAAOC,OAAO,GAAIrC,EAAO,CAAEI,UAAW+B,EAAOtB,QAAStB,gBAAgB,IAC9E,IF/BmC,wBEgClC,OAAO6C,OAAOC,OAAO,GAAIrC,EAAO,CAAEK,YAAa8B,EAAOtB,QAAStB,gBAAgB,IAChF,QACC,OAAOS,ICzByDO,YDqCxC,WAAwC,IAAvCP,EAAsC,uDAAhC8B,EAAkBK,EAAc,uDAAP,GAC1D,OAAQA,EAAOvB,MACd,IF9CkC,uBE+CjC,OAAOwB,OAAOC,OAAO,GAAIrC,EAAO,CAAEM,cAAc,EAAMZ,WAAY,eACnE,IF/CkC,uBEgDjC,OAAO0C,OAAOC,OAAO,GAAIrC,EAAO,CAAEP,QAAS0C,EAAOtB,QAASP,cAAc,EAAOZ,WAAY,+BAC7F,IFhDiC,sBEiDhC,OAAO0C,OAAOC,OAAO,GAAIrC,EAAO,CAAEQ,UAAW2B,EAAOtB,QAASP,cAAc,IAC5E,QACC,OAAON,MC7CJsC,EACLC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAE3DW,IAASC,OACL,kBAAC,IAAD,CAAWL,MAAOA,GACjB,kBAAC,EAAD,OACYM,SAASC,eAAe,SF8GnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACL6B,QAAQ7B,MAAMA,EAAM8B,c","file":"static/js/main.2c27da03.chunk.js","sourcesContent":["import React from 'react';\n\nconst JokeCard = ({ joke }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br1 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='' src={joke.icon_url}/>\n\t\t\t<h4>{joke.value}</h4>\n\t\t</div>\n\t);\n}\n\nexport default JokeCard;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '400px'}}>\n\t\t\t{ props.children }\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React from 'react';\nimport ReactPlayer from 'react-player'\n\nconst Player = ({url}) => {\n\treturn (\n\t\t<div className='tc dib br1 ma2 grow bw2 shadow-5'>\n\t\t\t<ReactPlayer \n\t\t\t\twidth='250px' \n\t\t\t\theight='200px' \n\t\t\t\turl={url}\n\t\t\t\tlight='https://freepngimg.com/download/chuck_norris/37468-5-chuck-norris.png'  \n\t\t\t\tplaying ={true} \n\t\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Player;","import React, {Component} from 'react';\nimport { connect} from 'react-redux'\nimport JokeCard from '../components/JokeCard';\nimport Scroll from '../components/Scroll'\nimport './App.css'\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Player from '../components/Player';\n\n\nimport { setSearchField, requestRobots, requestJoke} from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobotsIsPendig: state.requestRobots.robotsIsPendig,\n\t\trobotsArr: state.requestRobots.robotsArr,\n\t\trobotsError: state.requestRobots.robotsError,\n\t\tjokeIsPendig: state.requestJoke.jokeIsPendig,\n\t\tjokeArr: state.requestJoke.jokeArr,\n\t\tjokeError: state.requestJoke.jokeError,\n\t\tbuttonText: state.requestJoke.buttonText\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots()),\n\t\tonRequestJoke: () => dispatch(requestJoke())\n\t}\t\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t}\n\n\trender() {\n\t\tconst  { robotsIsPendig, onRequestJoke, jokeArr, buttonText } = this.props;\t\t\t\n\t\treturn robotsIsPendig ? \n\t\t<h1 className='tc'> LOADING... </h1> :\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>Chuck Norris Roulette</h1>\n\t\t\t\t<Button variant=\"outline-danger\" onClick={onRequestJoke}>{buttonText}</Button>{' '}\n\t\t\t\t<Scroll>\n\t\t\t\t\t<JokeCard joke={jokeArr}/>\n\t\t\t\t</Scroll>\n\t\t\t\t<Player url={'https://www.youtube.com/watch?v=7DzFZ_4Byw8&ab_channel=hishamwaffaii'}/>\n\t\t\t</div>\n\t\t);\t\t\n\t}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);//connect is higher order function\n\n// <SearchBox searchChange={onSearchChange}/>\n// <CardList robots={filterRobots}/>\n// const filterRobots = robotsArr.filter(robot => {\n// \t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n// \t\t})","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n\tREQUEST_JOKE_PENDING,\n\tREQUEST_JOKE_SUCCESS,\n\tREQUEST_JOKE_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD, //it's constunt this why is CAPS\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\nexport const requestJoke = () => (dispatch) => {\n\tdispatch({ type: REQUEST_JOKE_PENDING});\n\tfetch('https://api.chucknorris.io/jokes/random')\n\t\t.then(response=> response.json())\n\t\t.then(data => dispatch({ type: REQUEST_JOKE_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({ type: REQUEST_JOKE_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n//Promise have 3 states\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\nexport const REQUEST_JOKE_PENDING = 'REQUEST_JOKE_PENDING';\nexport const REQUEST_JOKE_SUCCESS = 'REQUEST_JOKE_SUCCESS';\nexport const REQUEST_JOKE_FAILED = 'REQUEST_JOKE_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n\tREQUEST_JOKE_PENDING,\n\tREQUEST_JOKE_SUCCESS,\n\tREQUEST_JOKE_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\n// searchRobots Reducer\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField:action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\trobotsIsPendig: false,\n\trobotsArr: [],\n\trobotsError: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch (action.type) {\n\t\tcase \tREQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { robotsIsPendig: true});\n\t\tcase \tREQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robotsArr: action.payload, robotsIsPendig: false});\n\t\tcase \tREQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { robotsError: action.payload, robotsIsPendig: false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\nconst initialStateJoke = {\n\tjokeIsPendig: false,\n\tjokeArr: [],\n\tjokeError: '',\n\tbuttonText: 'Do NOT press (if you are not Chuck)' \n}\n\nexport const requestJoke = (state=initialStateJoke, action={}) => {\n\tswitch (action.type) {\n\t\tcase \tREQUEST_JOKE_PENDING:\n\t\t\treturn Object.assign({}, state, { jokeIsPendig: true, buttonText: 'Loading...'});\n\t\tcase \tREQUEST_JOKE_SUCCESS:\n\t\t\treturn Object.assign({}, state, { jokeArr: action.payload, jokeIsPendig: false, buttonText: 'Give Me another Chuck joke'});\n\t\tcase \tREQUEST_JOKE_FAILED:\n\t\t\treturn Object.assign({}, state, { jokeError: action.payload, jokeIsPendig: false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots, requestJoke} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots, requestJoke});\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger)) // usally you use root reducer\n\nReactDOM.render(\n\t\t\t\t<Provider  store={store}>\n\t\t\t\t\t<App/>\n\t\t\t\t</Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}